#!/usr/bin/env python

from waflib.extras import symwaf2ic
from waflib.extras.gtest import summary
import os.path


def depends(ctx):
    ctx('pywrap')
    ctx('halco')


def options(opt):
    hopts = opt.add_option_group('pybind11')
    hopts.add_withoption('pybind', default=None,
                         help='Use pybind11-based bindings')

    opt.load('compiler_cxx')
    opt.load('gtest')
    opt.load('python')
    opt.load('pytest')


def configure(cfg):
    cfg.env.with_pybind = getattr(cfg.options, 'with_pybind', None)
    if cfg.env.with_pybind not in [True, False]:
        toplevel_path = symwaf2ic.get_toplevel_path()
        projects = set(str(os.path.relpath(p, toplevel_path))
                       for p in symwaf2ic.get_required_paths())
        is_hicann_dls = any(project in projects for project in [
                            'haldls', 'fisch'])
        is_hicann = 'halbe' in projects
        if is_hicann_dls and is_hicann:
            cfg.fatal(
                'cannot build python bindings of both HICANN/DLS at the same time\n'
                '(please specify --with-pybind / --without-pybind explicitly)'
            )
        cfg.env.with_pybind = is_hicann_dls
    cfg.msg(
        'Using pybind11-based python bindings',
        ['no', 'yes'][cfg.env.with_pybind])

    cfg.load('compiler_cxx')
    cfg.load('python')
    cfg.check_python_version()
    cfg.check_python_headers()
    cfg.load('pytest')
    cfg.load('genpybind')

    if cfg.env.with_pybind:
        cfg.check(
            compiler='cxx',
            features='cxx pyembed',
            uselib_store='PYBIND11HALCO',
            mandatory=True,
            header_name='pybind11/pybind11.h',
        )


def build(bld):
    if bld.env.with_pybind:
        bld(
            target='pyhalco_common',
            source='../include/halco/common/common.h',
            genpybind_tags='common',
            features='genpybind cxx cxxshlib pyext',
            use=['halco_common', 'PYBIND11HALCO', 'pyhalco_common_files'],
            install_path='${PREFIX}/lib',
            linkflags='-Wl,-z,defs'
        )

        bld(
            target='pyhalco_hicann_dls_vx',
            source='../include/halco/hicann-dls/vx/coordinates.h',
            genpybind_tags='hicann_dls_vx',
            features='genpybind cxx cxxshlib pyext',
            use=['halco_common', 'halco_hicann_dls_vx',
                 'PYBIND11HALCO', 'pyhalco_common'],
            install_path='${PREFIX}/lib',
            linkflags='-Wl,-z,defs'
        )

        bld(
            name='pyhalco_hicann_dls_vx_tests',
            tests='test/pyhalco_test_hicann_dls_vx.py',
            features='use pytest',
            use='pyhalco_hicann_dls_vx',
            install_path='${PREFIX}/bin',
            pythonpath=['test'],
        )

    else:
        bld(
            target='pyhalco_common',
            features='cxx cxxshlib pypp pyembed pyext',
            script='common/generate_common_coordinate.py',
            gen_defines='PYPLUSPLUS __STRICT_ANSI__',
            defines='PYBINDINGS',
            headers='../include/halco/common/common.h',
            use=['halco_common', 'BOOST4HALCO', 'BOOST4PYHALCO', 'PYHALCO', 'pywrap',
                 'pywrapstdvector', 'pycellparameters', 'pyhalco_common_files'],
            install_path='${PREFIX}/lib',
            linkflags='-Wl,-z,defs',
            includes='.',
        )

        bld(
            target='pyhalco_hicann_v2',
            features='cxx cxxshlib pypp pyembed pyext',
            script='hicann/v2/generate_hicann_v2_coordinate.py',
            gen_defines='PYPLUSPLUS __STRICT_ANSI__ BOOST_PP_VARIADICS',
            # gccxml requires non-variadic implementation of boost::variant for python wrappers
            defines=['PYBINDINGS', 'BOOST_VARIANT_DO_NOT_USE_VARIADIC_TEMPLATES'],
            export_defines='BOOST_VARIANT_DO_NOT_USE_VARIADIC_TEMPLATES',
            headers='../include/halco/hicann/v2/coordinates.h',
            use=['pyhalco_common', 'halco_hicann_v2'],
            install_path='${PREFIX}/lib',
            linkflags='-Wl,-z,defs',
            includes='.',
        )

        bld(
            name='pyhalco_hicann_v2_tests',
            tests='test/pyhalco_test_hicann_v2.py',
            features='use pytest',
            use='pyhalco_hicann_v2',
            install_path='${PREFIX}/bin',
            pythonpath=['test'],
            test_environ={'PYHALCO_API_CHECK': '1'},
        )

    bld(
        name='pyhalco_common_tests',
        tests='test/pyhalco_test_common.py',
        features='use pytest',
        use='pyhalco_common',
        install_path='${PREFIX}/bin',
        pythonpath=['test'],
    )

    # flat installation of all sources (and generated py{c,d}) into lib/
    bld(
        features='py',
        target='pyhalco_common_files',
        source=bld.path.ant_glob('**/pyhalco_*.py'),
        install_path='${PREFIX}/lib',
        relative_trick=False,
    )

    bld.add_post_fun(summary)
